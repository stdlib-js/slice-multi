{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isNull from '@stdlib/assert-is-null';\nimport isUndefined from '@stdlib/assert-is-undefined';\nimport isSlice from '@stdlib/assert-is-slice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an input argument is valid.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether the argument is valid\n*\n* @example\n* var bool = isValid( 3 );\n* // returns true\n*\n* bool = isValid( null );\n* // returns true\n*\n* bool = isValid( void 0 );\n* // returns true\n*\n* bool = isValid( '3' );\n* // returns false\n*/\nfunction isValid( value ) {\n\treturn (\n\t\tisInteger( value ) ||\n\t\tisNull( value ) ||\n\t\tisUndefined( value ) ||\n\t\tisSlice( value )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Multi-slice constructor.\n*\n* @constructor\n* @param {...(Slice|integer|null)} slice - slice\n* @throws {TypeError} a provided argument must be either a Slice, integer, null, or undefined\n* @returns {MultiSlice} MultiSlice instance\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*/\nfunction MultiSlice() {\n\tvar nargs;\n\tvar proxy;\n\tvar args;\n\tvar v;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof MultiSlice ) ) {\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ] );\n\t\t}\n\t\tif ( nargs === 3 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( nargs === 4 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], arguments[ 3 ] ); // eslint-disable-line max-len\n\t\t}\n\t\tif ( nargs === 5 ) {\n\t\t\treturn new MultiSlice( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ], arguments[ 3 ], arguments[ 4 ] ); // eslint-disable-line max-len\n\t\t}\n\t\targs = [];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\t// Use a workaround for being unable to combine `.apply` with the `new` operator:\n\t\tproxy = Object.create( MultiSlice.prototype );\n\t\treturn MultiSlice.apply( proxy, args );\n\t}\n\tthis._data = [];\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( !isValid( v ) ) {\n\t\t\tthrow new TypeError( format( '1j1Em', i, String( v ) ) );\n\t\t}\n\t\tthis._data.push( ( v === void 0 ) ? null : v );\n\t}\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof MultiSlice\n* @readonly\n* @type {string}\n* @default 'MultiSlice'\n*\n* @example\n* var str = MultiSlice.name;\n* // returns 'MultiSlice'\n*/\nsetReadOnly( MultiSlice, 'name', 'MultiSlice' );\n\n/**\n* Returns the number of slice dimensions.\n*\n* @name ndims\n* @memberof MultiSlice.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var ndims = ms.ndims;\n* // returns 4\n*/\nsetReadOnlyAccessor( MultiSlice.prototype, 'ndims', function get() {\n\treturn this._data.length;\n});\n\n/**\n* Returns multi-slice data.\n*\n* @name data\n* @memberof MultiSlice.prototype\n* @readonly\n* @type {Array<Slice|null|integer>}\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var data = ms.data;\n* // returns [...]\n*\n* var v = data[ 0 ];\n* // returns null\n*\n* v = data[ 1 ];\n* // returns <Slice>\n*\n* v = data[ 2 ];\n* // returns <Slice>\n*\n* v = data[ 3 ];\n* // returns 2\n*/\nsetReadOnlyAccessor( MultiSlice.prototype, 'data', function get() {\n\treturn this._data.slice();\n});\n\n/**\n* Serializes a multi-slice to a string.\n*\n* @name toString\n* @memberof MultiSlice.prototype\n* @type {Function}\n* @returns {string} serialized MultiSlice\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var str = ms.toString();\n* // returns 'MultiSlice(null,Slice(0,10,1),Slice(2,12,2),2)'\n*/\nsetReadOnly( MultiSlice.prototype, 'toString', function toString() {\n\tvar data;\n\tvar out;\n\tvar i;\n\n\tdata = this._data;\n\tout = [];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tout.push( String( data[ i ] ) );\n\t}\n\treturn 'MultiSlice('+out.join( ',' )+')';\n});\n\n/**\n* Serializes a multi-slice as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `MultiSlice` instance.\n*\n* @name toJSON\n* @memberof MultiSlice.prototype\n* @type {Function}\n* @returns {Object} serialized MultiSlice\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var s1 = new Slice( 0, 10, 1 );\n* var s2 = new Slice( 2, 12, 2 );\n*\n* var ms = new MultiSlice( null, s1, s2, 2 );\n* // returns <MultiSlice>\n*\n* var o = ms.toJSON();\n* // returns { 'type': 'MultiSlice', 'data': [ null, { 'type': 'Slice', 'data': [ 0, 10, 1 ] }, { 'type': 'Slice', 'data': [ 2, 12, 2 ] }, 2 ] }\n*/\nsetReadOnly( MultiSlice.prototype, 'toJSON', function toJSON() {\n\tvar data;\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tdata = this._data;\n\tout = {\n\t\t'type': 'MultiSlice',\n\t\t'data': []\n\t};\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\tv = data[ i ];\n\t\tout.data.push( ( v && typeof v.toJSON === 'function' ) ? v.toJSON() : v );\n\t}\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default MultiSlice;\n"],"names":["MultiSlice","nargs","proxy","args","v","i","value","arguments","length","this","push","Object","create","prototype","apply","_data","isInteger","isNull","isUndefined","isSlice","TypeError","format","String","setReadOnly","setReadOnlyAccessor","slice","data","out","join","type","toJSON"],"mappings":";;6sBAoFA,SAASA,IACR,IAAIC,EACAC,EACAC,EACAC,EACAC,EAlCaC,EAqCjB,GADAL,EAAQM,UAAUC,SACVC,gBAAgBT,GAAe,CACtC,GAAe,IAAVC,EACJ,OAAO,IAAID,EAAYO,UAAW,IAEnC,GAAe,IAAVN,EACJ,OAAO,IAAID,EAAYO,UAAW,GAAKA,UAAW,IAEnD,GAAe,IAAVN,EACJ,OAAO,IAAID,EAAYO,UAAW,GAAKA,UAAW,GAAKA,UAAW,IAEnE,GAAe,IAAVN,EACJ,OAAO,IAAID,EAAYO,UAAW,GAAKA,UAAW,GAAKA,UAAW,GAAKA,UAAW,IAEnF,GAAe,IAAVN,EACJ,OAAO,IAAID,EAAYO,UAAW,GAAKA,UAAW,GAAKA,UAAW,GAAKA,UAAW,GAAKA,UAAW,IAGnG,IADAJ,EAAO,GACDE,EAAI,EAAGA,EAAIJ,EAAOI,IACvBF,EAAKO,KAAMH,UAAWF,IAIvB,OADAH,EAAQS,OAAOC,OAAQZ,EAAWa,WAC3Bb,EAAWc,MAAOZ,EAAOC,EAChC,CAED,IADAM,KAAKM,MAAQ,GACPV,EAAI,EAAGA,EAAIJ,EAAOI,IAAM,CAE7B,KA9DAW,EAFgBV,EA+DhBF,EAAIG,UAAWF,KA5DfY,EAAQX,IACRY,EAAaZ,IACba,EAASb,IA4DR,MAAM,IAAIc,UAAWC,EAAQ,QAAShB,EAAGiB,OAAQlB,KAElDK,KAAKM,MAAML,UAAc,IAANN,EAAiB,KAAOA,EAC3C,CACD,OAAOK,IACR,CAeAc,EAAavB,EAAY,OAAQ,cAsBjCwB,EAAqBxB,EAAWa,UAAW,SAAS,WACnD,OAAOJ,KAAKM,MAAMP,MACnB,IAkCAgB,EAAqBxB,EAAWa,UAAW,QAAQ,WAClD,OAAOJ,KAAKM,MAAMU,OACnB,IAsBAF,EAAavB,EAAWa,UAAW,YAAY,WAC9C,IAAIa,EACAC,EACAtB,EAIJ,IAFAqB,EAAOjB,KAAKM,MACZY,EAAM,GACAtB,EAAI,EAAGA,EAAIqB,EAAKlB,OAAQH,IAC7BsB,EAAIjB,KAAMY,OAAQI,EAAMrB,KAEzB,MAAO,cAAcsB,EAAIC,KAAM,KAAM,GACtC,IA0BAL,EAAavB,EAAWa,UAAW,UAAU,WAC5C,IAAIa,EACAC,EACAvB,EACAC,EAOJ,IALAqB,EAAOjB,KAAKM,MACZY,EAAM,CACLE,KAAQ,aACRH,KAAQ,IAEHrB,EAAI,EAAGA,EAAIqB,EAAKlB,OAAQH,IAC7BD,EAAIsB,EAAMrB,GACVsB,EAAID,KAAKhB,KAAQN,GAAyB,mBAAbA,EAAE0B,OAA0B1B,EAAE0B,SAAW1B,GAEvE,OAAOuB,CACR"}